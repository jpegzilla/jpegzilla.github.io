#h1 an introduction to web components. part one: making a component.

<hr>

#p [d O]ver the past couple of months, I've been using [a web components](https://developer.mozilla.org/en-US/docs/Web/Web_Components) to rebuild my personal website. I've learned a lot about how they work, so it's time to document some of that information for people who might want it.

#p the last time I wrote an article about how to use this set of technologies, it was more geared toward people who already know react or some other component system, so this time it's going to be geared toward newcomers. plus, <abbr title="it's stinky and I don't like it >:(">react sucks anyway</abbr>, and I think web components are the future.

#p this is going to be a short one! depending on how fast you'd like to go, I think it'll only take about 15-20 minutes to complete the example project. this is just a guess though, might take longer if you don't have some of the things in the initial setup section.

<hr>

#h2 assumptions I'm going to make.

#p [d I]n order to  do the stuff in this post, I'm assuming right now that you have some understanding of how to use the command line, how to use [a the npm cli](https://docs.npmjs.com/cli/v7/commands/npm), and how to use html / css / javascript. that's about it!

#p I [i won't] assume you know much about other component systems like react, but if you already do, this post might feel pretty basic.

<hr>

#h2 initial setup.

#p there really isn't much setup required to get started with web components (because all the stuff you actually need is included in javascript already). however, I'll show you some stuff that I use to make my development process easier. neither of these are really required, but they might be useful for you too &mdash; still, <abbr title="...is the whole of the law.">do what thou wilt</abbr>.

#h3 one: [a sass - css preprocessor](https://sass-lang.com/install)

#p if you're still using regular old css in 2021, you [i might] be missing out. I'm not going to preach to you about this one, but sass makes writing css a lot more fun (and also the syntax is pretty, which is important to me at least).

#p again though, this isn't [i really] required. also, you can write css straight inside web components (which I'll show you) and you can only write sass in an external file.

#h3 two: some sort of boilerplate

#p in all my personal web projects, I use a tool I made called [a jpegzilla-init](https://www.npmjs.com/package/jpegzilla-init) (I know, really creative) to set up a foundation. if you run [c npm i -g jpegzilla-init], you can use it. 

#p to set up a basic web component project here, you'd run [c jpegzilla-init] inside your (empty) project folder and then follow the prompts (or run [c jpegzilla-init -w] to use the default setup). then, run something to compile the sass (this is important!!). the command you can use if you used [c jpegzilla-init] is:

#code sass --watch --style=compressed ./css/main.sass:./css/main.min.css

#p ...replacing .sass with .scss if you're [a using scss instead of sass](https://sass-lang.com/documentation/syntax).

#h3 getting everything running.

#p ok, so now what you have to do is serve your files and get ready to build stuff. you need some kind of tool that behaves like a web server that you'll use to preview your website while you're working on it. for our purposes, [a the live-server npm package](https://www.npmjs.com/package/live-server) will do the trick! so [c npm i -g live-server], and then run [c live-server] in your project directory. the site should just open in your browser, totally blank.

#p also &mdash; if you're using sass, now is the time to run that sass command written above. I like to make this command into an [a npm script](https://docs.npmjs.com/cli/v7/using-npm/scripts/) in a [c package.json] file, that way I can just type [c npm run sass] or something and then I don't have to type out that whole long command. hell, you could even make it into a [a bash alias](https://www.gnu.org/software/bash/manual/html_node/Aliases.html) if you wanted to.

<hr>

#h2 building a web component.

#p [d N]ow that the environment is prepared, it's time to open up your text editor and make a new web component. the baseline setup to create a new [a custom element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) for your component looks something like this:

#code class NewElement extends HTMLElement {}

#p what we're doing here is defining a new [a class that extends](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) &mdash; or builds on top of &mdash; the functionality of a regular old html element.

#p we'll end up with an element that we can work with in the same way as all other html elements &mdash; but potentially much more powerful than the base set of elements, and greater than the sum of its parts. something reusable, modifiable, and extensible. a [i component] that can become a part of a larger interface, just like a react component or something.

#p if you're using the setup from [c jpegzilla-init] (which I recommend you do!), you'll see a file called [c component.js] (or [c component.mjs]). inside this file is a class that extends the native [c HTMLElement] and gives it extra powers. the methods that you see in this class &mdash; [c toggleClass], [c setId], etc. &mdash; will be available on our new element just like regular html element methods, like <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector" rel="noopener noreferrer" target="_blank">[c querySelector]</a>.

#p either way, here's how we're going to create our own custom element. make a javascript file inside the folder you're storing your components inside. the name should be whatever your component is going to be called. inside that file, you're going to [a export](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) a class of the same name that will extend an html element. if you're using [c jpegzilla-init], you'll be [a import](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/import)ing and extending the included [c Component] class.

#p here's an example of what you should have after this step:

#code import Component from './component.mjs'

class NewElement extends Component {}

export default { element: NewElement, name: 'new-element' }

#p let's go through this line by line, since it's the basis of everything we'll be doing afterwards.

#p [b one: importing the base component.] the base component is described above, and included in the base project. it's just an extension of javascript's [c HTMLElement] class. if you don't feel like using my default project, you can extend [c HTMLElement] yourself!

#p [b two: creating our new element class.] in the second line we create a new element by extending the base component. again, this is just allowing us to add more functionality to the base [c Component] class.

#p [b three: exporting the element.] you'll notice that in the third line, we're exporting an object containing the actual class as well as the name of the class. the reason for this will become apparent when I show you how we're going to [a register each element](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define) that we create.

#p the mechanism for this registration is inside your main javascript file (assuming you're using the default project). you might be able to see what it's going to do, but don't worry if you don't understand it now. I'll explain it when it's time! for now, let's finish building our component.

<hr>

#h3 writing the html.

#p the first step for writing the html structure in your custom component involves adding a method to your class called [c connectedCallback]. this method fires whenever you add the custom element to the DOM, so this is where we can write the html. you just have to set [c this.innerHTML] to your desired html.

#code connectedCallback() {
&emsp;this.innerHTML = &lt;p&gt;hello world&lt;/p&gt;
}

#p now you have a custom element that displays the text 'hello world' (or whatever you decide to put in there). now we have to get the element to show up on our web page!

<hr>

#h3 registering our element.

#p inside our [c main] javascript file, you'll see a console log, an empty array, and a loop that iterates over that array. we can go ahead and remove the console log and import our element. something like this:

#code import NewElement from './components/newelement.mjs'

#p now, place [c NewElement] into the [c elements] array. this array is used as a collection of all our custom elements so that they can all be registered when the javascript loads. the actual registering is done by the [c customElements.define] function in the loop! the [a function used to define custom elements](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define) enables our new element to be used like a regular element in our html document, under the name that we gave it. in this example, our element is called [c new-element]. let's put that in our html document's [c &lt;body>] tag. something like this:

#code ...
&lt;body>

&emsp;&lt;new-element&gt;&lt;/new-element&gt;

&lt;/body>
...

#p now, if you go back to your browser, you should see the element actually being rendered in the page. now you've gone through the whole process of creating and using a web component from beginning to end. nicely done!

<hr>

#h2 conclusion.

#p [d T]his [i is] only an introduction, so I think that at this point you have all you need to get started from scratch with web components. anything else involved with developing a site using web components isn't really specific to web components. meaning anything you can do with regular html / react / etc, you can do with web components.

#p I'll probably follow up this post with maybe some stuff about the [a shadow dom](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM) or whatever else I think could be useful or interesting. until then, have fun and good luck.

#p if you want to talk about this post or anything else, join my discord below and say something. I may respond instantaneously. don't be freaked out.

<hr>

#h2 currently listening to:

#p - [a the flesh failures / let the sunshine in](https://www.youtube.com/watch?v=lC7LI98aZmA) by [a melba moore](http://www.melbamoore.com/)

#p - [a HiDE iN SEW](https://www.youtube.com/watch?v=VuepFaUYxvk) by [a BiS](https://www.brandnewidolsociety.tokyo)

#p - [a cold green eyes ft. roos denayer](https://www.youtube.com/watch?v=kkhuQRhWWf0) by [a station earth](https://soundcloud.com/station-earth) and [a roos denayer](https://www.instagram.com/rosabutsi)

#p - [a to the stage](https://www.youtube.com/watch?v=hK8MAW6FeLU) by [a asking alexandria](https://www.askingalexandria.com/)

#p - [a 摩天動物園 city zoo](https://www.youtube.com/watch?v=A6gIat5xLWI) by [a G.E.M.](https://www.iamgem.com/)

<hr>